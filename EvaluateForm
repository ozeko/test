using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace EvaluateTest
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                var result = Evaluate(textBox1.Text);
                label1.Text = result.ToString(); 
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        bool Evaluate(string s)
        {
            var words = s.Split(new string[] { " ", "ã€€" }, StringSplitOptions.RemoveEmptyEntries);
            var q = new Queue<string>(words);
            var bope = "";
            var result = false;
            while (true)
            {
                var left = q.Dequeue();
                var ope = q.Dequeue();
             loop:
                var right = q.Dequeue();
                if (bope == "")
                    result = Sub1(left, ope, right);
                else
                    result = Sub2(result, bope, Sub1(left, ope, right));
                if (q.Count == 0) break;

                ope = q.Dequeue();
                if ("<>=".Contains(ope[0]))
                {
                    bope = "and";
                    left = right;
                    goto loop;
                }
                bope = ope;
            }
            return result;
        }

        bool Sub1(string left, string ope, string right)
        {
            double v1,v2;
            if (!double.TryParse(left, out v1))
                throw new Exception();
            if (!double.TryParse(right, out v2))
                throw new Exception();
            if (ope == "<")
                return v1 < v2;
            if (ope == ">")
                return v1 > v2;
            if (ope == ">=")
                return v1 >= v2;
            if (ope == "<=")
                return v1 <= v2;
            if (ope == "=")
                return v1 == v2;
            if (ope == "<>")
                return v1 != v2; 
            throw new Exception();
        }

        bool Sub2(bool left, string ope, bool right)
        {
            if (string.Compare(ope, "and", true) == 0)
                return left && right;
            if (string.Compare(ope, "or", true) == 0)
                return left || right;
            throw new Exception();
        }







    }
}
